from aiogram import Bot, executor, types
from aiogram.dispatcher import Dispatcher
from aiogram.types.bot_command import BotCommand
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from random import choice
import os
from dotenv import load_dotenv

load_dotenv('./token.env')

TOKEN = os.getenv('TOKEN')

compliments = ['–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–µ–Ω(–Ω–∞)', "–£ —Ç–µ–±—è –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å", "–£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è", "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è",
               "–¢—ã –∫—Ä–∞—Å–∏–≤—ã–π(–∞—è)", "–£ —Ç–µ–±—è –∫—Ä—É—Ç–æ–π –ª—É–∫", "–¢—ã –∫–ª–∞—Å–Ω–æ –≤—ã–≥–ª—è–¥–∏—à—å", "–£ —Ç–µ–±—è –∫—Ä–∞—Å–∏–≤—ã–µ –≥–ª–∞–∑–∞",
               "–¢—ã —Å—É–ø–µ—Ä", "–£ —Ç–µ–±—è —è—Ä–∫–∞—è —É–ª—ã–±–∫–∞", "–¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å"]

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

data = dict()


class FSMCommands(StatesGroup):
    admin = State()
    ch_st1 = State()
    ch_st2 = State()


async def checker_for_admin(ch: int, user_to_check: int):
    for name in (await bot.get_chat_administrators(chat_id=ch)):
        if name["user"]["id"] == user_to_check:
            return True
    return False


async def checker_for_owner(ch: int, user_to_check: int):
    name = await bot.get_chat_member(ch, user_to_check)
    if name["status"] == "creator":
        return True
    return False


@dp.message_handler(commands="start")
async def command_start(message: types.Message):
    data[message.chat.id] = data.get(message.chat.id, dict())
    await bot.set_my_commands(
        [
            BotCommand('start', '–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
            BotCommand('add_new_admin', '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'),
            BotCommand('change_status', '–ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            BotCommand('get_random_compliment', '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç'),
            BotCommand('darts', '–°—ã–≥—Ä–∞—Ç—å –≤ –¥–∞—Ä—Ç—Å'),
            BotCommand('ping_all', '–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö'),
            BotCommand('delete_bot', '–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞')
        ])
    await message.answer("–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ì–∏—Ä–æ –í–ª–∞–¥–∏–º–∏—Ä–æ–º –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞ –ò–ü–†")

@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def some_handler(message: types.Message):
    data[message.chat.id] = data.get(message.chat.id, dict())
    data[message.chat.id][message.from_user.username] = message.from_user.id


@dp.message_handler(commands="add_new_admin")
async def add_new_admin(message: types.Message):
    data[message.chat.id] = data.get(message.chat.id, dict())
    if await checker_for_admin(message.chat.id, message.from_user.id):
        await FSMCommands.admin.set()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(state=FSMCommands.admin)
async def pull_admin(message: types.Message, state: FSMContext):
    res = message.text
    if message.text[0] == '@':
        res = message.text[1:len(message.text)]
    if res in data[message.chat.id].keys():
        res = data[message.chat.id][res]
    else:
        res = "no"

    if res == "no":
        await message.answer("–í —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º")
        await state.finish()
    else:
        if await checker_for_admin(message.chat.id, res):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await state.finish()
        else:
            await bot.promote_chat_member(chat_id=message.chat.id,
                                          user_id=res,
                                          can_manage_chat=True,
                                          can_change_info=True,
                                          can_delete_messages=True,
                                          can_promote_members=True,
                                          can_pin_messages=True,
                                          can_edit_messages=True,
                                          can_post_messages=True,
                                          can_invite_users=True)
            await message.answer("–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
            await state.finish()


@dp.message_handler(commands="ping_all")
async def ping_all(message: types.Message):
    data[message.chat.id] = data.get(message.chat.id, dict())
    if await checker_for_admin(message.chat.id, message.from_user.id):
        cnt = 0
        ping_names: str = ""
        for user_name in data[message.chat.id].keys():
            if cnt % 5 == 4:
                await message.answer(ping_names)
                ping_names = ""
            ping_names += ('@' + user_name + ' ')
            cnt += 1
        if len(ping_names) != 0:
            await message.answer(ping_names)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(commands="change_status")
async def change_stat(message: types.Message):
    data[message.chat.id] = data.get(message.chat.id, dict())
    if await checker_for_admin(message.chat.id, message.from_user.id):
        await FSMCommands.ch_st1.set()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(state=FSMCommands.ch_st1)
async def change_stat1(message: types.Message, state: FSMContext):
    res = message.text
    if message.text[0] == '@':
        res = message.text[1:len(message.text)]
    if res in data[message.chat.id].keys():
        res = data[message.chat.id][res]
    else:
        res = "no"

    if res == "no":
        await message.answer("–í —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º")
        await state.finish()
    else:
        if await checker_for_owner(message.chat.id, res):
            await message.answer(f"{res}")
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")
            await state.finish()
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å")
        await FSMCommands.ch_st2.set()
        async with state.proxy() as d:
            d['username'] = res


@dp.message_handler(state=FSMCommands.ch_st2)
async def change_stat2(message: types.Message, state: FSMContext):
    if len(message.text) > 16:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏–≤—ã—à–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω")
        await state.finish()
    else:
        async with state.proxy() as d:
            if not await checker_for_admin(message.chat.id, d['username']):
                await bot.promote_chat_member(chat_id=message.chat.id,
                                              user_id=d['username'])
            await bot.set_chat_administrator_custom_title(chat_id=message.chat.id,
                                                          user_id=d['username'],
                                                          custom_title=message.text)
        await message.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω")
        await state.finish()


@dp.message_handler(commands='get_random_compliment')
async def compliment(message: types.Message):
    await message.answer(choice(compliments))


@dp.message_handler(commands='darts')
async def darts(message: types.Message):
    await bot.send_dice(chat_id=message.chat.id,
                        emoji="üéØ",
                        protect_content=True)
    await message.answer(message.from_user.username)


@dp.message_handler(commands="delete_bot")
async def leave_chat(message: types.Message):
    if await checker_for_admin(message.chat.id, message.from_user.id):
        await message.answer("–ë–æ—Ç —É–¥–∞–ª—ë–Ω(")
        await bot.leave_chat(chat_id=message.chat.id)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

@dp.message_handler()
async def collect_all_messages(message: types.Message):
    if message.from_user.id != bot.id:
        data[message.chat.id] = data.get(message.chat.id, dict())
        data[message.chat.id][message.from_user.username] = message.from_user.id

executor.start_polling(dp, skip_updates=True)
